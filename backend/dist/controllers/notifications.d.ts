import { Response } from 'express';
import { NotificationType, NotificationPriority } from '@prisma/client';
import { AuthRequest } from '@/types/auth';
import { Server } from 'socket.io';
export declare const setSocketIO: (socketIO: Server) => void;
export declare const getUserNotifications: (req: AuthRequest, res: Response) => Promise<Response<any, Record<string, any>>>;
export declare const getUnreadCount: (req: AuthRequest, res: Response) => Promise<Response<any, Record<string, any>>>;
export declare const markAsRead: (req: AuthRequest, res: Response) => Promise<Response<any, Record<string, any>>>;
export declare const markAllAsRead: (req: AuthRequest, res: Response) => Promise<Response<any, Record<string, any>>>;
export declare const deleteNotification: (req: AuthRequest, res: Response) => Promise<Response<any, Record<string, any>>>;
export declare const createNotification: (data: {
    userId: string;
    title: string;
    message: string;
    type?: NotificationType;
    priority?: NotificationPriority;
    actionUrl?: string;
    actionText?: string;
    relatedId?: string;
    relatedType?: string;
    metadata?: any;
    expiresAt?: Date;
}) => Promise<{
    message: string;
    userId: string;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    title: string;
    type: import(".prisma/client").$Enums.NotificationType;
    isRead: boolean;
    priority: import(".prisma/client").$Enums.NotificationPriority;
    readAt: Date | null;
    actionUrl: string | null;
    actionText: string | null;
    relatedId: string | null;
    relatedType: string | null;
    metadata: import("@prisma/client/runtime/library").JsonValue | null;
    expiresAt: Date | null;
}>;
export declare const NotificationService: {
    bookingCreated: (userId: string, bookingId: string, serviceName: string) => Promise<{
        message: string;
        userId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        type: import(".prisma/client").$Enums.NotificationType;
        isRead: boolean;
        priority: import(".prisma/client").$Enums.NotificationPriority;
        readAt: Date | null;
        actionUrl: string | null;
        actionText: string | null;
        relatedId: string | null;
        relatedType: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        expiresAt: Date | null;
    }>;
    bookingStatusUpdated: (userId: string, bookingId: string, status: string, serviceName: string) => Promise<{
        message: string;
        userId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        type: import(".prisma/client").$Enums.NotificationType;
        isRead: boolean;
        priority: import(".prisma/client").$Enums.NotificationPriority;
        readAt: Date | null;
        actionUrl: string | null;
        actionText: string | null;
        relatedId: string | null;
        relatedType: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        expiresAt: Date | null;
    }>;
    messageReceived: (userId: string, senderName: string, conversationId: string) => Promise<{
        message: string;
        userId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        type: import(".prisma/client").$Enums.NotificationType;
        isRead: boolean;
        priority: import(".prisma/client").$Enums.NotificationPriority;
        readAt: Date | null;
        actionUrl: string | null;
        actionText: string | null;
        relatedId: string | null;
        relatedType: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        expiresAt: Date | null;
    }>;
    reviewReceived: (userId: string, rating: number, serviceName: string, reviewId: string) => Promise<{
        message: string;
        userId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        type: import(".prisma/client").$Enums.NotificationType;
        isRead: boolean;
        priority: import(".prisma/client").$Enums.NotificationPriority;
        readAt: Date | null;
        actionUrl: string | null;
        actionText: string | null;
        relatedId: string | null;
        relatedType: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        expiresAt: Date | null;
    }>;
    paymentReceived: (userId: string, amount: number, serviceName: string, paymentId: string) => Promise<{
        message: string;
        userId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        type: import(".prisma/client").$Enums.NotificationType;
        isRead: boolean;
        priority: import(".prisma/client").$Enums.NotificationPriority;
        readAt: Date | null;
        actionUrl: string | null;
        actionText: string | null;
        relatedId: string | null;
        relatedType: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        expiresAt: Date | null;
    }>;
    serviceApproved: (userId: string, serviceName: string, serviceId: string) => Promise<{
        message: string;
        userId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        type: import(".prisma/client").$Enums.NotificationType;
        isRead: boolean;
        priority: import(".prisma/client").$Enums.NotificationPriority;
        readAt: Date | null;
        actionUrl: string | null;
        actionText: string | null;
        relatedId: string | null;
        relatedType: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        expiresAt: Date | null;
    }>;
    serviceRejected: (userId: string, serviceName: string, reason: string, serviceId: string) => Promise<{
        message: string;
        userId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        type: import(".prisma/client").$Enums.NotificationType;
        isRead: boolean;
        priority: import(".prisma/client").$Enums.NotificationPriority;
        readAt: Date | null;
        actionUrl: string | null;
        actionText: string | null;
        relatedId: string | null;
        relatedType: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        expiresAt: Date | null;
    }>;
    welcomeMessage: (userId: string, userName: string) => Promise<{
        message: string;
        userId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        type: import(".prisma/client").$Enums.NotificationType;
        isRead: boolean;
        priority: import(".prisma/client").$Enums.NotificationPriority;
        readAt: Date | null;
        actionUrl: string | null;
        actionText: string | null;
        relatedId: string | null;
        relatedType: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        expiresAt: Date | null;
    }>;
    specialOffer: (userId: string, title: string, description: string, offerUrl?: string) => Promise<{
        message: string;
        userId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        type: import(".prisma/client").$Enums.NotificationType;
        isRead: boolean;
        priority: import(".prisma/client").$Enums.NotificationPriority;
        readAt: Date | null;
        actionUrl: string | null;
        actionText: string | null;
        relatedId: string | null;
        relatedType: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        expiresAt: Date | null;
    }>;
};
export declare const cleanupExpiredNotifications: () => Promise<number>;
//# sourceMappingURL=notifications.d.ts.map